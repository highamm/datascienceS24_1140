---
title: "Section 6: `tidyr`"
author: "Matt Higham"
format: 
  html:
    embed-resources: true
---

```{r}
library(tidyverse)
library(here)
prices_df <- read_csv(here("data/UBSprices2.csv"))
prices_long <- prices_df |>
  pivot_longer(2:7, names_to = "commodity_year",
                          values_to = "price") |>
  separate(commodity_year, into = c("commodity", "year"),
           sep = -4)
prices_long
## sep = -4 tells R to count 4 "spots" from the right
## and separate at that point. (positive 4 would mean
## 4 "spots" from the left).
```

Class Exercise 3.

```{r}
prices_wide <- prices_long |>
  pivot_wider(names_from = commodity,
              values_from = price)
prices_wide
```

Class Exercise 4. `prices_wide` would be easier for the first plot (can make this with `prices_long` but would have to `filter(commodity == "rice")` first).

For the second plot, `prices_long` would be easier because we can easily supply `commodity` as a colour aesthetic.

Class Exercises 5 and 6.

```{r}
mortality_df <- read_csv(here("data/under5mortality.csv"))
head(mortality_df)

mortality_long <- mortality_df |>
  pivot_longer(2:217, names_to = "Year",
               values_to = "mortality",
               names_transform = list(Year = as.numeric)) |>
  rename(country = `Under five mortality`)

ggplot(data = mortality_long, aes(x = Year,
                                  y = mortality)) +
  geom_line(aes(group = country), alpha = 0.2)
```

Class Exercise 7.

A lot of countries have completely flat lines before 1900. Likely, these represent "average" mortality across the entire century, not mortality for each year.

## Your Turn

Your Turn 1

```{r}
library(tidyverse)
library(here)
baseball_df <- read_csv(here("data/mlb2016.csv"))
head(baseball_df)
```

Some columns have $ signs or other symbols.

Also, the `Years` column actually contains three different variables (the number of years they've played, their start year, and their end year).

Your Turn 2, 3, and 4.

```{r}
baseball_clean <- baseball_df |> separate(Years, into = c("duration", "span"),
                        sep = " ") |>
  separate(span, c("start_year", "end_year"),
           sep = "-") |>
  mutate(Salary = parse_number(Salary),
         Total.Value = parse_number(Total.Value),
         Avg.Annual = parse_number(Avg.Annual),
         start_year = parse_number(start_year),
         end_year = parse_number(end_year))
## baseball_df |> slice(48, 59) |> view()
```

Your Turn 3.

Some players do not have an end date to their contract. Therefore, there is no `-` and there is nothing to separate by.

Your Turn 5.

Side-by-side boxplots (or side-by-side violin plots).

```{r}
ggplot(data = baseball_clean, aes(x = POS, y = Salary)) +
  geom_boxplot(colour = "lightcyan4", fill = "lightcyan1") +
  theme_minimal()

ggplot(data = baseball_clean, aes(x = POS, y = Salary)) +
  geom_violin(colour = "lightcyan4", fill = "lightcyan1") +
  theme_minimal()
```

Strip Plot

```{r}
ggplot(data = baseball_clean, aes(x = POS, y = Salary)) +
  geom_jitter(width = 0.2, aes(colour = POS),
              show.legend = FALSE) +
  scale_colour_viridis_d() +
  theme_minimal()
```

Faceted Histograms

```{r}
ggplot(data = baseball_clean, aes(x = Salary)) +
  geom_histogram(colour = "lightcyan4", fill = "lightcyan1") +
  facet_wrap(~ POS) +
  theme_minimal()
```

Coloured Frequency Plots

```{r}
ggplot(data = baseball_clean, aes(x = Salary)) +
  geom_freqpoly(aes(colour = POS)) +
  theme_minimal() +
  scale_colour_viridis_d()
```

The boxplots are most easily interpretable for this particular data set. The strip plot is also nice because you can see an approximate sample size for each position.

Your Turn 7.

```{r}
nfl_df <- read_csv(here::here("data/nfl_salary.csv"))
nfl_df
```

The tidy data set is not tidy because position should be its own variable in its own column and salary should also be its own variable in its own column.

Your Turn 8.

```{r}
nfl_long <- nfl_df |> pivot_longer(2:11, names_to = "position",
                       values_to = "salary")
nfl_long
```

```{r}
## all three of these achieve the task described in your turn 9.
## will be viable for YT 10
nfl_max <- nfl_long |> group_by(year, position) |>
  mutate(rank_salary = rank(desc(salary),
                            ties.method = "first")) |>
  filter(rank_salary == 1)
## now, ties are broken so that the first row with the tie
## gets the higher rank

## will be viable for YT 10
nfl_long |> group_by(year, position) |>
  arrange(desc(salary)) |>
  slice(1)

## will not be viable for YT 10
nfl_long |> group_by(year, position) |>
  summarise(max_salary = max(salary, na.rm = TRUE))

ggplot(data = nfl_max, aes(x = year, salary)) +
  geom_line(aes(colour = position)) +
  scale_colour_viridis_d() +
  theme_minimal()

ggplot(data = nfl_max, aes(x = year, y = salary)) +
  geom_line() +
  facet_wrap(~ position) +
  theme_minimal()
## for the coloured graph, it's a little easier to compare positions,
## but, in general, 10 is too many to distinguish so 
## the faceted is easier to read overall.


```

Your Turn 10

```{r}
nfl_top20 <- nfl_long |> group_by(year, position) |>
  mutate(rank_salary = rank(desc(salary),
                            ties.method = "first")) |>
  filter(rank_salary <= 20) |>
  group_by(year, position) |>
  summarise(mean_salary = mean(salary, na.rm = TRUE))
nfl_top20

ggplot(data = nfl_top20, aes(x = year, y = mean_salary)) +
  geom_line() +
  facet_wrap(~ position) +
  theme_minimal()
```

Your Turn 11

```{r}
nfl_adj <- nfl_long |> filter(year == 2011 | year == 2018) |>
  mutate(salary_adj = case_when(year == 2011 ~ salary * 1.14,
                                year == 2018 ~ salary)) |>
  group_by(year, position) |>
  mutate(rank_salary = rank(desc(salary),
                            ties.method = "first")) |>
  filter(rank_salary <= 20) |>
  summarise(mean_salary = mean(salary_adj, na.rm = TRUE))
nfl_adj

ggplot(nfl_adj, aes(x = year, y = mean_salary)) +
  geom_line() +
  facet_wrap(~ position)
```

Your Turn 12.

```{r}
nfl_18 <- nfl_long |>
  group_by(year, position) |>
  mutate(rank_salary = rank(desc(salary),
                            ties.method = "first")) |>
  filter(year == 2018)
ggplot(data = nfl_18, aes(x = rank_salary,
                           y = salary)) +
  geom_line() +
  facet_wrap(~ position) +
  theme_minimal()
```