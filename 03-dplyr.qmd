---
title: "Section 3: `dplyr`"
author: "Matt Higham"
format: 
  html:
    embed-resources: true
---

```{r}
library(babynames)
library(tidyverse)
```

## Class Exercises 

Class Exercise 1 and 2.

```{r}
babynames_m17 <- babynames |>
  filter(sex == "M" & year == 2017) |>
  arrange(desc(n)) |>
  slice(1:10)

ggplot(data = babynames_m17, aes(x = name, y = n)) +
  geom_col()

babynames_peter <- babynames |>
  filter(name == "Peter" & sex == "M")

ggplot(data = babynames_peter, aes(x = year, y = n)) +
  geom_line()
```

Class Exercise 5.

We cannot use the pipe with `mean()` because the first argument to the mean function is __not__ a data frame. 

fitness_df |> summarise(mean_val = mean(distance))

## Your Turn

Your Turn 1

```{r}
## a
babynames |> filter(year != 1945)

## b
babynames |> filter(n > 400 & n < 5000)

## c
babynames_mc <- babynames |>
  filter((name == "Hilary" & sex == "F") |
                      (name == "Monica" & sex == "F"))
babynames_mc
```

Your Turn 2

```{r}
ggplot(data = babynames_mc, aes(x = year, y = n)) +
  geom_line(aes(colour = name))
```

Your Turn 3

```{r}
babynames_5 <- babynames |> filter((name == "Matthew" & sex == "M") |
                      (name == "Robin" & sex == "M") |
                      (name == "Jessica" & sex == "F") |
                      (name == "Michael" & sex == "M") |
                      (name == "Ivan" & sex == "M"))
ggplot(data = babynames_5, aes(x = year, y = n)) +
  geom_line(aes(colour = name))
```

Your Turn 4

```{r}
babynames_02m <- babynames |>
  filter(year == 2002 & sex == "M") |>
  arrange(desc(n)) |>
  slice(1:10)

ggplot(data = babynames_02m, aes(x = name, y = prop)) +
  geom_col()
```

## Section 3.3

```{r}
library(tidyverse)
slumajors_df <- read_csv("https://raw.githubusercontent.com/highamm/ds234_quarto/main/data_online/SLU_Majors_17_21.csv")
slumajors_df

slumajors_df <- slumajors_df |>
  mutate(ntotal = nfemales + nmales) |>
  mutate(percfemale = 100 * nfemales / (nfemales + nmales))

slumajors_df <- slumajors_df |>
  mutate(morewomen = if_else(percfemale > 50,
                             true = "Yes",
                             false = "No")) |>
  mutate(large_majority =
           case_when(percfemale >= 70 ~ "female",
                     percfemale <= 30 ~ "male",
                     percfemale > 30 & percfemale < 70 ~ "none"))

toy_df <- tibble(x = c(NA, 3, 4, 7),
                 y = c(1, 4, 3, 2),
                 z = c("A", "A", "B", NA))
```

## Class Exercises

Class Exercise 1.

It depends on what you're interested in. But, if you're more interested in gender imbalance, 55% might make more sense as the cutoff.

Class Exercise 2. 

It's nice to be as inclusive as possible. But, we should carefully consider what is truly "anonymous" when we make public results from a survey.

Class Exercise 3.

```{r}
slumajors_df |>
  mutate(testcase = case_when(percfemale >= 40 ~ "Yes",
                              percfemale > 60 ~ "No")) |>
  select(testcase, percfemale, everything())
## case_when() evaluates the conditions in the order
## provided by us. Rows that satisfy none of the conditions
## receive an NA.
```

Class Exercise 4 and 5.

```{r}
library(babynames)
babynames_rank <- babynames |> group_by(sex, year) |>
  mutate(rank_pop = rank(desc(n)))

babynames_rank |> filter(rank_pop == 1) |>
  ungroup() |>
  group_by(name) |>
  summarise(n_appear = n())
  
```

Class Exercise 6.

```{r}
babynames_test <- babynames |>
  group_by(year, sex) |> mutate(ntest = n / prop)
babynames_test |> slice(1, 2, 3, 4, 5)
```

If we want to just obtain the first 5 rows, we need to add an `|> ungroup()` before `slice()`. Otherwise, slice pulls the first 5 rows for each group.

## Your Turn

Your Turn 1. See Handout.

Your Turn 2.

```{r}
toy_df <- tibble(x = c(NA, 3, 4, 7),
                 y = c(1, 4, 3, 2),
                 z = c("A", "A", "B", NA))
toy_df
```

a.

```{r}
toy_df |> mutate(test_x = x + 2)
## any row that is NA is still NA in the new variable.
```

b. 

```{r}
toy_df |> arrange(x)
toy_df |> arrange(desc(x))
## NA is at the bottom with either order
```
c. 

```{r}
toy_df |> filter(x < 5)

## drops NA)
```

d. 

```{r}
toy_df |> summarise(mean_x = mean(x))
## returns NA. To get R to ignore the missing values
## add na.rm = TRUE to the mean() function
```

e. 

```{r}
toy_df |> group_by(z) |>
  summarise(max_x = max(x))
## NA in z forms its own group. Then, the summary is performed
## for any group that does not have a missing x value
```

Your Turn 3.

a. generally safe: you still have access to the entire data set: you've just added another column.

b. generally safe: same reason as (a): now the data is just in a different order

c. generally unsafe, unless you are absolutely sure that
the observations you're filtering out, you will not ever need.

d. generally unsafe here, because summarise() collapses the data over any groups that are present, altering its structure.

e. generally unsafe, unless you are absolutely sure that you will not ever need the columns that you select out.

Your Turn 4.

```{r}
slumajors_df |>
  summarise(meantotalmajor = mean(ntotal),
            totalgrad = sum(ntotal)) 
slumajors_df |>
  mutate(meantotalmajor = mean(ntotal),
            totalgrad = sum(ntotal)) |>
  select(meantotalmajor, totalgrad, everything())

## mutate() maintains the structure of the data set, and just
## adds new columns for additional variables that are
## created

## summarise() collapses the data frame across any groups.
## Here, there are no groups, so only 1 row is returned
## from the summarise() statement.
```

Your Turn 5.

```{r}
babynames_distinct <- babynames |>
  group_by(year) |>
  summarise(n_distinct = n())

ggplot(data = babynames_distinct, aes(x = year,
                                      y = n_distinct)) +
  geom_line()
```

Your Turn 6.


```{r}
babynames_distinct2 <- babynames |>
  group_by(year, sex) |>
  summarise(n_distinct = n())

ggplot(data = babynames_distinct2, aes(x = year,
                                      y = n_distinct)) +
  geom_line(aes(colour = sex))
```

Your Turn 7.

```{r}
babynames |> group_by(name) |>
  summarise(n_births = sum(n)) |>
  arrange(desc(n_births))
```
